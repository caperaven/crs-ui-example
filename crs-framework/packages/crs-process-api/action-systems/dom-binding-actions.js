class p{static async perform(a,t,e,n){await this[a.action]?.(a,t,e,n)}static async set_widget(a,t,e,n){const r=a.args.element,s=await _(a,t,e,n),m=await crs.process.getValue(a.args.context,t,e,n)||e?.parameters?.bId;await crs.binding.events.emitter.postMessage(r,{context:m,html:s})}static async clear_widget(a,t,e,n){const r=a.args.element;if(await crs.binding.events.emitter.postMessage(r,{context:null,html:""}),e?.bindable==!0){let s=crs.binding.data.getContext(e.parameters.bId);delete s.pass,delete s.fail}}static async create_inflation_template(a,t,e,n){const r=await crs.process.getValue(a.args.template_id,t,e,n),s=await crs.process.getValue(a.args.source,t,e,n),m=await crs.process.getValue(a.args.tag_name,t,e,n),o=await crs.process.getValue(a.args.wrapper,t,e,n),d=await crs.process.getValue(a.args.ctx,t,e,n),u=Object.keys(s),i=document.createElement("template");let g=i;if(o!=null){const c=await crs.call("dom","create_element",o,t,e,n);i.content.appendChild(c),g=c}for(let c of u){let f=s[c];f.tag_name||=m;let w=await crs.call("dom","create_element",f,t,e,n);w.textContent=["${",c,"}"].join(""),g.content!=null?g.content.appendChild(w):g.appendChild(w)}await crs.binding.inflation.manager.register(r,i,d||"context")}static async elements_from_template(a,t,e,n){const r=await crs.process.getValue(a.args.template_id,t,e,n),s=await crs.process.getValue(a.args.template,t,e,n),m=await crs.process.getValue(a.args.data,t,e,n),o=await crs.process.getValue(a.args.remove_template,t,e,n),d=await crs.process.getValue(a.args.recycle,t,e,n),u=await crs.process.getValue(a.args.row_index,t,e,n);let i=await crs.process.getValue(a.args.parent,t,e,n);i=await crs.dom.get_element(i,t,e,n),s!=null&&await b(s,r);let g=null;i!=null&&(d!=!1&&i.childElementCount>0?g=i.children:i.innerHTML="");const c=await crs.binding.inflation.manager.get(r,m,g,u||0);return c!=null&&i?.appendChild(c),o==!0&&await crs.binding.inflation.manager.unregister(r),c}static async update_cells(a,t,e,n){return this.elements_from_template(a,t,e,n)}}async function _(l,a){if(l.args.url.indexOf("$fn")!=-1){const t=l.args.url.replace("$fn.",""),e=await a[t](l.args),n=document.createElement("template"),r=l.args.html.split(".")[1];return n.innerHTML=e,crs.binding.templates.add(r,n),e}if(l.args.html.indexOf("$template")==0){const t=l.args.html.split(".")[1];return await crs.binding.templates.get(t,l.args.url)}return await crs.process.getValue(l.args.html,a)}async function b(l,a,t){let e;l instanceof HTMLTemplateElement?e=l:e=document.querySelector(l),await crs.binding.inflation.manager.register(a,e)}crs.intent.dom_binding=p;export{p as DomBindingActions};
