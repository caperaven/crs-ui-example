class l{static async perform(i,n,s,o,r){const e=u(i.args.condition,s)(n,s,o);if(e&&i.pass_step!=null){const c=await crs.getNextStep(s,i.pass_step,r);await crs.process.runStep(c,n,s,o,r)}if(!e&&i.fail_step!=null){const c=await crs.getNextStep(s,i.fail_step,r);await crs.process.runStep(c,n,s,o,r)}return i.args.target!=null&&await crs.process.setValue(i.args.target,e,n,s,o),e}}function u(t,i){let n=t;for(const o of Object.keys(i.prefixes))n=n.split(o).join(i.prefixes[o]);n.indexOf("$binding")!=-1&&(n=f(n,i.parameters.bId)),n=n.split("$").join("");const s=`return ${n}`;return new Function("context","process","item",s)}function f(t,i){const n=t.indexOf("$binding"),s=t.indexOf(" ",n),r=t.substring(n,s).split("."),a=r[1],e=[`crs.binding.data.getProperty(${i}, "${a}")`];r.length>2&&(r.splice(0,2),e.push(r.join(".")));const c=Array.from(t);return c.splice(n,s-n,e.join(".")),t=c.join(""),t.indexOf("$binding")!=-1&&(t=f(t,i)),t}crs.intent.condition=l;export{l as ConditionActions,u as compileExpression};
