class c{static async perform(e,r,t,a){await this[e.action]?.(e,r,t,a)}static async copy_to_clipboard(e,r,t,a){let s=await crs.process.getValue(e.args.source,r,t,a);const i=(await crs.process.getValue(e.args.shouldStringify||e.args.stringify,r,t,a)??!0)===!0?JSON.stringify(s):s;await navigator.clipboard.writeText(i)}static async sleep(e,r,t,a){return new Promise(async s=>{const n=await crs.process.getValue(e.args.duration,r,t,a);let i=setInterval(()=>{clearInterval(i),s()},Number(n||0))})}static async pause(e,r,t){return new Promise(a=>{t.status="wait";let s;const n=i=>{delete t.status,delete t.resume,delete s?.resume,typeof i!="object"&&(e.alt_next_step=i),a()};t.parameters?.bId!=null&&(s=crs.binding.data.getContext(t.parameters.bId),s.resume=n),t.resume=n})}static async resume(e,r,t,a){t.resume?.()}static async abort(e,r,t,a){const s=await crs.process.getValue(e.args.error,r,t,a);throw new Error(s)}static async is_mobile(e,r,t,a){return/Mobi|Android/i.test(navigator.userAgent)}static async is_portrait(e,r,t,a){let s=window.matchMedia("(orientation: portrait)").matches;return e?.args?.target!=null&&await crs.process.setValue(e.args.target,s,r,t,a),s}static async is_landscape(e,r,t,a){let s=window.matchMedia("(orientation: landscape)").matches;return e?.args?.target!=null&&await crs.process.setValue(e.args.target,s,r,t,a),s}static async reload_page(e,r,t,a){globalThis.location?.reload()}}crs.intent.system=c;export{c as SystemActions};
