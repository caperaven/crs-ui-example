class o{#e;#i;#s;#t;#a=!1;#n=this.#o.bind(this);#r;get definition(){return this.#i}get routeDefinition(){return Object.freeze(this.#t)}constructor(t,s,i,e){this.#e=t,this.#i=s,this.#s=e,this.#r=i,this.goto(window.location.href).then(()=>{addEventListener("popstate",this.#n)})}dispose(){removeEventListener("popstate",this.#n),this.#e=null,this.#i=null,this.#s=null,this.#t=null,this.#n=null,this.#a=null,this.#r=null}async#o(t){t.preventDefault(),this.#t=await crs.call("route","parse",{url:window.location.href}),await this.#s?.(this.#t)}async goto(t){typeof t=="string"&&(t=await crs.call("route","parse",{url:t})),this.#t=t;const s=this.#t.params[0];(s==null||s==="")&&(this.#t.params[0]=this.#r);const i=this.#t.params[0],e=this.#e.find(r=>r.view===i);if(e==null){console.error("Route not found");return}const n=await crs.call("route","create_url",{definition:this.#t});history.pushState(null,null,n),await this.#s?.(this.#t,e.title)}async refresh(){return new Promise(async t=>{await this.#s?.(this.#t),t()})}setParameters(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.params[s]=t[s]}setQueries(t){if(this.#t!=null)for(const s of Object.keys(t))this.#t.query[s]=t[s]}}export{o as RouteManager};
